import numpy as np
import cv2

class Gravity:
    def __init__(self,Rx = 500 ,Ry = 500) -> None:
        self.Lit = []
        self.Gra = []   
        self.rx = Rx
        self.ry = Ry
        self.rSeta = 0

    def Gravity(self,m1,m2,r,G = 6.673 ):
        Gp = G*((m1*m2)/(r**2))
        return Gp

    def Calculation_G(self):
        for n in self.Lit:
            ap = n[3]
            L3 = []
            for i in self.Lit:
                if n[0] != i[0]:
                    y = i[3][0] - ap[0]
                    x = i[3][1] - ap[1]
                    Squid = np.sqrt((x*x)+(y*y))
                    Seta = np.arctan2(y,x)*(180/np.pi)*-1 + -90
                    self.Drow(i,Seta, self.Gravity(n[1],i[1],Squid))
                    #print(np.arctan2(x,y)*(180/np.pi))
            
        cv2.imshow("ll", self.Fild)
        cv2.waitKey()


    def sets(self, M, r, Name = "Dokdo",axis = [0,0],color = [0,0,255]):
        for i in self.Lit:
            if i[0] == Name:
                print("이름이 같습니다.")
                raise
                exit()
                break
        
        self.Lit.append([Name,M,r,[axis[0]-self.ry,axis[1]-self.rx],0])
        
        self.Pick(axis,r,color)

    def Drow(self, L1,Seta, Lagrangu):
        for i in range(int(Lagrangu)):
            coss = int(i * np.sin(np.radians(Seta + L1[4])) + L1[3][1] + self.rx)
            sins = int(i * np.cos(np.radians(Seta + L1[4])) + L1[3][0] + self.ry)
            try:
                if coss < 0 or coss > 999:
                    raise
                if sins < 0 or sins > 999:
                    raise
                self.Fild[sins,coss] = [100,100,100]
            except:
                pass            

    
    def Pick(self,axis, r, color = [0,0,255]):
        for i in range(r-1):
            i += 1
            for ip in range(360):
                rad = np.radians(ip)
                x = int(i*np.cos(rad))
                y = int(i*np.sin(rad))
                
                y = axis[0]+y
                x = axis[1]+x
                #print([axis[0]+y,axis[1]+x])
                try:
                    if x < 0 or x > 999:
                        raise
                    if y < 0 or y > 999:
                        raise
                    self.Fild[y,x] = color
                except:
                    pass
        

    def Base_(self, Size = [1000,1000]):
        self.Fild = np.zeros([Size[0],Size[1],3])

def rand_ty():
    a = np.random.randint(0,999)
    b = np.random.randint(0,999)
    #print(a," :: ",b)
    return[a,b] 


for i in range(10):
    a = Gravity()
    a.Base_()
    a.sets(120,10,"gidi1", rand_ty())
    a.sets(1000,20,"gidi2", rand_ty(), color=[0,100,100])
    a.sets(10,10,"gidi3", rand_ty())
    a.sets(500,10,"gidi4", rand_ty())
    for i in range(10):
        a.sets(100,10,"gidi4%d" %i, rand_ty())
    a.Calculation_G()
